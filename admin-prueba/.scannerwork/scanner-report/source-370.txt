import { Component, ViewEncapsulation, ChangeDetectorRef, ViewChild, ElementRef, QueryList, ViewChildren, ChangeDetectionStrategy } from '@angular/core';
import {MediaMatcher} from '@angular/cdk/layout';
import {FormControl, Validators} from '@angular/forms';
import {map, startWith} from 'rxjs/operators';
import {Observable} from 'rxjs';
import { FuseCardComponent } from '@fuse/components/card';
import { MatButtonToggleChange } from '@angular/material/button-toggle';
import * as moment from 'moment';
@Component({
    selector     : 'landing-home',
    templateUrl  : './home.component.html',
    encapsulation: ViewEncapsulation.None,
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class LandingHomeComponent
{
    mobileQuery: MediaQueryList;
    private _mobileQueryListener: () => void;
    @ViewChildren(FuseCardComponent, {read: ElementRef}) private _fuseCards: QueryList<ElementRef>;

    filters: string[] = ['all', 'Ellos', 'Ellas', 'kids'];
    numberOfCards: any = {};
    selectedFilter: string = 'all';
    goToNegocio = false;
    Data = [
        {
            name: 'Comunidad espiritual',
            calificacion: 4.5,
            reviews: 40,
            description: 'Oración, peticiones, testimonios',
            url:'comunidad'
        },
        {
            name: 'Estudiando la bíblia',
            calificacion: 4.5,
            reviews: 40,
            description: 'Varios estudios bíblicos',
            url:'estudiando'
        },
        {
            name: 'Formación para niños',
            calificacion: 4.5,
            reviews: 40,
            description: 'Aquí encuantras materiales, estudios y demás enfocado en los niños',
            url:'childs'
        },
        {
            name: 'Consejería Online',
            calificacion: 4.5,
            reviews: 40,
            description: 'Programa una consejeria con pastores profesionales en le temas de familia, pastoral, etc...',
            url:'consejeria'
        },
        {
            name: 'Blogs',
            calificacion: 4.5,
            reviews: 40,
            description: 'Los principales blogs creados por pastores muy reconocidos y temas variados',
            url:'blogs'
        },
        {
            name: 'Enriquecimiento espitirual',
            calificacion: 4.5,
            reviews: 40,
            description: 'mensajes, reflexiones y demás que te ayudarán a un crecimiento espitirual',
            url:'espiritual'
        },
        {
            name: 'Soporte',
            calificacion: 4.5,
            reviews: 40,
            description: 'Dudas, consultas o sugerencias',
            url:'soporte'
        },
        /* {
            tipo: 'Ellos',
            name: 'Barbería 9',
            calificacion: 4.5,
            reviews: 40,
            description: 'Peluquería y barbería central ellos',
        } */

    ]

    teamMembers = [
        {
            id    : '2bfa2be5-7688-48d5-b5ac-dc0d9ac97f14',
            avatar: 'assets/images/avatars/female-10.jpg',
            name  : 'Nadia Morales',
            email : 'nadiamcknight@mail.com',
            phone : '+1-943-511-2203',
            title : 'Depilación'
        },
        {
            id    : '77a4383b-b5a5-4943-bc46-04c3431d1566',
            avatar: 'assets/images/avatars/male-19.jpg',
            name  : 'Carl Buitrago',
            email : 'blackburn.best@beadzza.me',
            phone : '+1-814-498-3701',
            title : 'Peluquería - Barbería'
        },
        {
            id    : '8bb0f597-673a-47ca-8c77-2f83219cb9af',
            avatar: 'assets/images/avatars/male-14.jpg',
            name  : 'Duncan Castro',
            email : 'duncancarver@mail.info',
            phone : '+1-968-547-2111',
            title : 'Barbería'
        },
        {
            id    : 'c318e31f-1d74-49c5-8dae-2bc5805e2fdb',
            avatar: 'assets/images/avatars/male-01.jpg',
            name  : 'Martin Richards',
            email : 'martinrichards@mail.biz',
            phone : '+1-902-500-2668',
            title : 'Peluquería'
        },
        {
            id    : '0a8bc517-631a-4a93-aacc-000fa2e8294c',
            avatar: 'assets/images/avatars/female-20.jpg',
            name  : 'Carla Muñoz',
            email : 'candicemunoz@mail.co.uk',
            phone : '+1-838-562-2769',
            title : 'Depilación'
        },
        {
            id    : 'a4c9945a-757b-40b0-8942-d20e0543cabd',
            avatar: 'assets/images/avatars/female-01.jpg',
            name  : 'Vickie Montenegro',
            email : 'vickiemosley@mail.net',
            phone : '+1-939-555-3054',
            title : 'Peluquería y depilación'
        },
        {
            id    : 'b8258ccf-48b5-46a2-9c95-e0bd7580c645',
            avatar: 'assets/images/avatars/female-02.jpg',
            name  : 'Tina Hernandez',
            email : 'tinaharris@mail.ca',
            phone : '+1-933-464-2431',
            title : 'Peluquería - manicura'
        },

    ];
    filtroHoras = [ '8:00', '9:00', '10:00', '11:00'];
    fechasesion:string = '';
    horaI:string = '';
    colaboradorSelected: Array<any> = [];
    teamFiltered: Array<any> = [];
    serviciosColaborador: Array<any>;
    valorServicio: number = 0;
    serviciosSeleccionados: Array<any> = [];
    dataToSave: Array<any> = [];
    /**
     * Constructor
     */
    constructor(
        changeDetectorRef: ChangeDetectorRef, media: MediaMatcher,
    )
    {
        this.mobileQuery = media.matchMedia('(max-width: 600px)');
        this._mobileQueryListener = () => changeDetectorRef.detectChanges();
        this.mobileQuery.addListener(this._mobileQueryListener);
    }

    ngOnInit(): void {
        this.dataToSave =  JSON.parse(localStorage.getItem('agendamiento')) === null ? [] : JSON.parse(localStorage.getItem('agendamiento'));
    }

    /**
     * After view init
     */
    ngAfterViewInit(): void
    {
        // Calculate the number of cards
        this._calcNumberOfCards();

        // Filter the cards for the first time
        this._filterCards();
    }

    /**
     * On filter change
     *
     * @param change
     */
    onFilterChange(change: MatButtonToggleChange): void
    {
        // Set the filter
        this.selectedFilter = change.value;

        // Filter the cards
        this._filterCards();
    }

    private _calcNumberOfCards(): void
    {
        // Prepare the numberOfCards object
        this.numberOfCards = {};

        // Prepare the count
        let count = 0;

        // Go through the filters
        this.filters.forEach((filter) => {

            // For each filter, calculate the card count
            if ( filter === 'all' )
            {
                count = this._fuseCards.length;
            }
            else
            {
                count = this.numberOfCards[filter] = this._fuseCards.filter(fuseCard => fuseCard.nativeElement.classList.contains('filter-' + filter)).length;
            }

            // Fill the numberOfCards object with the counts
            this.numberOfCards[filter] = count;
        });
    }

    /**
     * Filter the cards based on the selected filter
     *
     * @private
     */
    private _filterCards(): void
    {
        // Go through all fuse-cards
        this._fuseCards.forEach((fuseCard) => {

            // If the 'all' filter is selected...
            if ( this.selectedFilter === 'all' )
            {
                // Remove hidden class from all cards
                fuseCard.nativeElement.classList.remove('hidden');
            }
            // Otherwise...
            else
            {
                // If the card has the class name that matches the selected filter...
                if ( fuseCard.nativeElement.classList.contains('filter-' + this.selectedFilter) )
                {
                    // Remove the hidden class
                    fuseCard.nativeElement.classList.remove('hidden');
                }
                // Otherwise
                else
                {
                    // Add the hidden class
                    fuseCard.nativeElement.classList.add('hidden');
                }
            }
        });
    }

    agendarCita(member:any){
        this.serviciosColaborador = member.title.split(' ').length === 0 ? member.title.split('') : member.title.split(' ').filter((item:any) => item.length > 3);
        this.colaboradorSelected.push(member);
        this.goToNegocio = false;

    }

    filtroServicio(servicios:string){
        this.teamFiltered = []
        this.teamMembers.forEach( col => {
            if (col.title.toLowerCase().split(' ').includes(servicios.toLowerCase())) {
                this.teamFiltered.push(col)
            }
        })
        //this.teamFiltered = this.teamMembers.filter((item:any) => item.title.toLowerCase().split(' ').includes(servicios.toLowerCase()))
    }

    CalcularServicio(service:string, event:any){
        if(service.toLowerCase() === 'peluquería' && event.checked){
            this.valorServicio = this.valorServicio + 20000;
            this.serviciosSeleccionados.push(service);
        } else if(service.toLowerCase() === 'peluquería' && !event.checked){
            this.valorServicio = this.valorServicio - 20000;
            this.serviciosSeleccionados = this.serviciosSeleccionados.filter( item => item.toLowerCase() !== service.toLowerCase());
        } else if(service.toLowerCase() === 'manicura' && event.checked){
            this.valorServicio = this.valorServicio + 30000;
            this.serviciosSeleccionados.push(service)
        } else if(service.toLowerCase() === 'manicura' && !event.checked){
            this.valorServicio = this.valorServicio - 30000;
            this.serviciosSeleccionados = this.serviciosSeleccionados.filter( item => item.toLowerCase() !== service.toLowerCase());
        } else if(service.toLowerCase() === 'barbería' && event.checked){
            this.valorServicio = this.valorServicio + 40000;
            this.serviciosSeleccionados.push(service);
        } else if(service.toLowerCase() === 'barbería' && !event.checked){
            this.valorServicio = this.valorServicio - 40000;
            this.serviciosSeleccionados = this.serviciosSeleccionados.filter( item => item.toLowerCase() !== service.toLowerCase());
        } else if(service.toLowerCase() === 'depilación' && event.checked){
            this.valorServicio = this.valorServicio + 60000;
            this.serviciosSeleccionados.push(service);
        } else if(service.toLowerCase() === 'depilación' && !event.checked){
            this.valorServicio = this.valorServicio - 60000;
            this.serviciosSeleccionados = this.serviciosSeleccionados.filter( item => item.toLowerCase() !== service.toLowerCase());
        }
    }

    SaveAgendamiento(){
        const data = {
            id: Math.random()+this.colaboradorSelected[0].name,
            name: this.colaboradorSelected[0].name,
            email: this.colaboradorSelected[0].email,
            avatar: this.colaboradorSelected[0].avatar,
            servicios: this.serviciosSeleccionados,
            valor: this.valorServicio,
            fecha: this.fechasesion,
            hora: this.horaI,
            cantidadHoras: this.serviciosSeleccionados.length
        }

        this.dataToSave?.push(data)
        localStorage.setItem('agendamiento', JSON.stringify(this.dataToSave));
        location.reload();
    }
}
