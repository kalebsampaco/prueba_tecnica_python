/* eslint-disable prefer-arrow/prefer-arrow-functions */
/* eslint-disable @typescript-eslint/explicit-function-return-type */
/* eslint-disable @typescript-eslint/naming-convention */
import { Component, ViewEncapsulation, ChangeDetectorRef, ViewChild, ElementRef, QueryList, ViewChildren, ChangeDetectionStrategy, OnInit, AfterViewInit, inject, OnChanges, SimpleChanges } from '@angular/core';
import {MediaMatcher} from '@angular/cdk/layout';
import {UntypedFormControl, Validators} from '@angular/forms';
import {map, startWith, takeUntil} from 'rxjs/operators';
import {Observable, Subject} from 'rxjs';
import {COMMA, ENTER} from '@angular/cdk/keycodes';
import { MatChipInputEvent, MatChipsModule} from '@angular/material/chips';
import {MatIconModule} from '@angular/material/icon';
import {MatFormFieldModule} from '@angular/material/form-field';
import {LiveAnnouncer} from '@angular/cdk/a11y';
import { FuseCardComponent } from '@fuse/components/card';
import { MatButtonToggleChange } from '@angular/material/button-toggle';
import * as moment from 'moment';
import { UserService } from 'app/core/user/user.service';
import { User } from 'app/core/user/user.types';
import { MatSelectionListChange } from '@angular/material/list';
import { chats as chatsData, contacts as contactsData, messages as messagesData, profile as profileData } from './data';
import { ComunidadService } from 'app/services/comunidad/comunidad.service';
import { PrayerS } from 'app/models/modelComunidad';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { WebSocketService } from '../../../services/websocket/web-socket.service';



@Component({
    selector     : 'landing-comunidad',
    templateUrl  : './comunidad.component.html',
    encapsulation: ViewEncapsulation.None,
    // changeDetection: ChangeDetectionStrategy.OnPush
})
export class ComunidadComponent implements OnInit, AfterViewInit, OnChanges
{
    @ViewChild('prayInput') prayInput: ElementRef<HTMLInputElement>;
    mobileQuery: MediaQueryList;
    // @ViewChildren(FuseCardComponent, {read: ElementRef}) private _fuseCards: QueryList<ElementRef>;
    // @ViewChild('prayer') private prayer: MatSelectionListChange;

    numberOfCards: any = {};
    selectedFilter: string = 'all';
    goToOracion: boolean = false;
    goToOracionNew: boolean = true;
    Data = [
        {
            id: 1,
            name: 'Oración',
            description: 'Programa tu horario y listado de oraciones'
        },
        {
            id: 2,
            name: 'Peticiones',
            description: 'Pon tu petición para que otros puedan orar por ti',
        },
        {
            id: 3,
            name: 'Testimonios',
            description: 'Testifica de Cristo para que otros crean',
        },

    ];
    tipoDeOracion: string[] = ['Por mi nación', 'contra las ideoligías de genero', 'Por la familia', 'Por Israel', 'Por los perdidos'];
    fechaIniciosesion: string = '';
    fechasFinesion: string= '';
    horaI: any  = '';
    horaF: string = '';
    colaboradorSelected: Array<any> = [];
    teamFiltered: Array<any> = [];
    serviciosColaborador: Array<any>;
    valorServicio: number = 0;
    serviciosSeleccionados: Array<any> = [];
    dataToSave: Array<any> = [];
    selectedOptions: string[] = [];
    user: User;
    isChecked: false;
    goToPray: boolean = false;
    bloquearBotones: boolean = false;
    goToPeticiones: boolean = false;
    goToTestimonio: boolean = false;
    chats: any[];
    chat: any;
    prays$: Observable<PrayerS[]>;
    prays: PrayerS[];
    addOnBlur = true;
    readonly separatorKeysCodes = [ENTER, COMMA] as const;
    oracionesCustom: any[] = [];
    prayCtrl = new UntypedFormControl();
    filteredPray: Observable<string[]>;
    mensaje: string = '';

    // announcer = inject(LiveAnnouncer);

    private _mobileQueryListener: () => void;
    private _unsubscribeAll: Subject<any> = new Subject<any>();
    private _chats: any[] = chatsData;
    private _contacts: any[] = contactsData;
    private _messages: any[] = messagesData;
    private _profile: any = JSON.parse(sessionStorage.getItem('userData')) ?? '';
    /**
     * Constructor
     */
    constructor(
        changeDetectorRef: ChangeDetectorRef, media: MediaMatcher,
        private _userService: UserService,
        private _changeDetectorRef: ChangeDetectorRef,
        private _praysService: ComunidadService,
        private announcer: LiveAnnouncer,
        private websocketService: WebSocketService,
    )
    {
        this.mobileQuery = media.matchMedia('(max-width: 600px)');
        this._mobileQueryListener = () => changeDetectorRef.detectChanges();
        this.mobileQuery.addListener(this._mobileQueryListener);
        this.filteredPray = this.prayCtrl.valueChanges.pipe(
          startWith(null),
          map((pray: string | null) => (pray ? this._filter(pray) : this.tipoDeOracion.slice())),
        );
    }

    ngOnInit(): void {
        // Subscribe to user changes

        this._userService.user$
            .pipe(takeUntil(this._unsubscribeAll))
            .subscribe((user: User) => {
                this.user = user;

                // Mark for check
                this._changeDetectorRef.markForCheck();
            });

        this._praysService.getPrays().subscribe((pray: any) => {
            // console.log(pray);
            this.dataToSave = pray;
                if(this.dataToSave.length > 0){
                    this.goToOracionNew = false;
                    this.dataToSave.sort(function(a, b) {
                                          if (Date.parse(a.fechaFin) > Date.parse(b.fechaFin)) {
                                            return 1;
                                          }
                                          if (Date.parse(a.fechaFin) < Date.parse(b.fechaFin)) {
                                            return -1;
                                          }
                                          // a must be equal to b
                                          return 0;
                                        });
                    this.bloquearBotones = this.dataToSave.some((el: any) => el.isChecked === true);
                }
        });
    }

    /**
     * After view init
     */
    ngAfterViewInit(): void
    {
        this.websocketService.listen('join').subscribe((data: any) => {
            this.chats = data.data = data.data.map(chat => ({
                ...chat,
                // Get the actual contact object from the id and attach it to the chat
                contact: this._profile,
                // Since we use same set of messages on all chats, we assign them here.
                messages: {
                    ...chat.attributes,
                    chatId   : chat.id,
                    contactId: chat.attributes.user,
                    isMine   : Number(chat.attributes.user) === Number(this._profile.id)
                }

            }));
            this.chat = this.chats; //.find(item => item.id === this._profile.id);
        });

    }

    ngOnChanges(changes: SimpleChanges) {
        console.log(changes);
        // changes.prop contains the old and the new value...
    }

    SendMessage(){
        const data = {
            user: `${this._profile.id}`,
            message: this.mensaje,
        };
        this.websocketService.emit('sendMessage', data).subscribe((response: any) => {
            console.log(response);
            this.ngAfterViewInit();
            this.mensaje = '';
        });
    }


    SaveAgendamiento(){
        const data = {
            idUser: this.user.id,
            dateInit: this.fechaIniciosesion,
            hourInit: this.horaI,
            HourEnd: this.horaF,
            allDays: this.isChecked,
            users_permissions_user: this.user.email,
            motivo: JSON.stringify(this.selectedOptions),
            dateEnd: this.fechasFinesion
          };

        this._praysService.createPrays(data).subscribe((pray: any) => {
            this.ngOnInit();
        });
    }


    Eliminar(agenda){
        this._praysService.deletePray(agenda.id).subscribe((pray: any) => {
            this.ngOnInit();
        });
    }

    ReProgramAgendamiento(agenda: any){

        const data = {
            idUser: this.user.id,
            dateInit: agenda.fechaInicio,
            hourInit: agenda.hora,
            HourEnd: agenda.horaF,
            allDays: agenda.isChecked,
            users_permissions_user: agenda.email,
            motivo: JSON.stringify(agenda.prayer),
            dateEnd: agenda.fechaFin
          };

        this._praysService.changePrays(data, agenda.id).subscribe((pray: any) => {
            this.ngOnInit();
        });
    }

    check(e: any){
        console.log(e, this.isChecked);
    }

    goToSelected(item: any){
        if(item.id===1){
            this.goToOracion=true;
            this.goToPeticiones = false;
            this.goToTestimonio = false;
        } else if(item.id === 2){
            this.goToOracion=false;
            this.goToPeticiones = true;
            this.goToTestimonio = false;
        } else if(item.id === 3){
            this.goToOracion=false;
            this.goToPeticiones = false;
            this.goToTestimonio = true;
        } else {
            this.goToOracion=false;
            this.goToPeticiones = false;
            this.goToTestimonio = false;
        }
        //this.goToOracion=true
    }

    selectChat(id: string): void
    {
        this.chat = this.chats.find(item => item.id === id);
    }

    add(event: MatChipInputEvent, array: any[]): void {
        const value = (event.value || '').trim();

        // Add our fruit
        if (value) {
            array.push(value);
        }

        // Clear the input value
        event.chipInput.clear();
    }

    remove(pray: any, array: any[]): void {
        const index = array.indexOf(pray);

        if (index >= 0) {
            array.splice(index, 1);
        }
    }
    addSelect(event: MatChipInputEvent): void {
        const value = (event.value || '').trim();

        // Add our fruit
        if (value) {
          this.selectedOptions.push(value);
        }

        // Clear the input value
        event.chipInput.clear();

        this.prayCtrl.setValue(null);
    }

    removeSelect(fruit: string): void {
        const index = this.selectedOptions.indexOf(fruit);

        if (index >= 0) {
          this.selectedOptions.splice(index, 1);
        }
    }

    selected(event: MatAutocompleteSelectedEvent): void {
        this.selectedOptions.push(event.option.viewValue);
        this.prayInput.nativeElement.value = '';
        this.prayCtrl.setValue(null);
    }

    private _filter(value: string): string[] {
        const filterValue = value.toLowerCase();
        return this.tipoDeOracion.filter(pray => pray.toLowerCase().includes(filterValue));
    }
}
